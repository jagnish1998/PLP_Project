package com.capgemini.hotelmanagement.dao;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Query;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.capgemini.hotelmanagement.bean.HotelBean;
import com.capgemini.hotelmanagement.bean.UserBean;
import com.capgemini.hotelmanagement.exception.HotelManagementException;

@Repository
public class UserDaoImpl implements UserDao {

	@Autowired
	EntityManagerFactory entityManagerFactory;

	@Override
	public boolean addUser(UserBean userBean) throws HotelManagementException {
		boolean isAdded = false;
		EntityManager entityManager = entityManagerFactory.createEntityManager();
		EntityTransaction entityTransaction = entityManager.getTransaction();
		try {
			entityTransaction.begin();
			entityManager.persist(userBean);
			entityTransaction.commit();
			isAdded = true;
		} catch (Exception e) {
			throw new HotelManagementException("Email Already Exist Please  try with diffrent Email");
		}
		return isAdded;
	}

	@Override
	public UserBean login(String email, String password) throws HotelManagementException {
		UserBean userBean = null;
		EntityManager entityManager = entityManagerFactory.createEntityManager();
		try {
			String jpql = "from UserBean where email = :email and password = :password";
			Query query = entityManager.createQuery(jpql);
			query.setParameter("email", email);
			query.setParameter("password", password);
			userBean = (UserBean) query.getSingleResult();
		} catch (Exception e) {
			throw new HotelManagementException("Invalid Email and Password");
		}
		return userBean;
	}

	@Override
	public boolean updateUserProfile(UserBean userBean) throws HotelManagementException {

		boolean isUpdate = false;
		EntityManager entityManager = entityManagerFactory.createEntityManager();
		EntityTransaction entityTransaction = entityManager.getTransaction();
		UserBean userBean2 = entityManager.find(UserBean.class, userBean.getUserId());
		if (userBean2 != null) {
			if (userBean.getUserName() != null) {
				userBean2.setUserName((userBean.getUserName()));
			}
			if (userBean.getAddress() != null) {
				userBean2.setAddress(userBean.getAddress());
			}
			if (userBean.getPhoneNo() != null) {
				userBean2.setPhoneNo(userBean.getPhoneNo());
			}
		}
		try {
			entityTransaction.begin();
			entityManager.persist(userBean2);
			entityTransaction.commit();
			isUpdate = true;

		} catch (Exception e) {
			throw new HotelManagementException("Cannot Update");
		}
		return isUpdate;
	}

	@Override
	public List<UserBean> getAllUser() throws HotelManagementException {
		List<UserBean> userList = null;
		EntityManager entityManager = entityManagerFactory.createEntityManager();
		try {
			String jpql = "from UserBean";
			Query query = entityManager.createQuery(jpql);
			userList = (List<UserBean>) query.getResultList();
		} catch (Exception e) {
			throw new HotelManagementException("Unable to get all User");

		}
		return userList;
	}

	@Override
	public List<UserBean> getUser(String type) throws HotelManagementException {
		List<UserBean> userList = null;
		EntityManager entityManager = entityManagerFactory.createEntityManager();
		try {
			String jpql = "from UserBean where userType = :userType";
			Query query = entityManager.createQuery(jpql);
			query.setParameter("userType", type);
			userList = (List<UserBean>) query.getResultList();
		} catch (Exception e) {
			throw new HotelManagementException("No User of type" + type + "is present");
			// e.printStackTrace();
		}
		return userList;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<HotelBean> getHotel(String hotelLocation) throws HotelManagementException {
		List<HotelBean> hotelList = null;
		EntityManager entityManager = entityManagerFactory.createEntityManager();
		try {
			String jpql = "from HotelBean where hotelLocation=:hotelLocation";
			Query query = entityManager.createQuery(jpql);
			query.setParameter("hotelLocation", hotelLocation);
			hotelList = (List<HotelBean>) query.getResultList();
		} catch (Exception e) {
			throw new HotelManagementException("Unable to get all HotalLocation");
		}
		return hotelList;
	}

	@Override
	public boolean changePassword(UserBean userBean, String newPassword) throws HotelManagementException {
		boolean isUpdated = false;
		EntityManager entityManager = entityManagerFactory.createEntityManager();
		EntityTransaction entityTransaction = entityManager.getTransaction();
		try {
			entityTransaction.begin();
			String password = userBean.getPassword();
			int id = userBean.getUserId();
			String jpql = "update UserBean set password=:newPassword where password =:password and userId =: id";
			Query query = entityManager.createQuery(jpql);
			query.setParameter("newPassword", newPassword);
			query.setParameter("password", password);
			query.setParameter("id", id);
			int queryResult = query.executeUpdate();
			entityTransaction.commit();
			if (queryResult > 0) {
				isUpdated = true;
			} else {
				isUpdated = false;
			}
		} catch (Exception e) {
			entityTransaction.rollback();
			throw new HotelManagementException("Old Password is Incorrect");
		}
		return isUpdated;
	}

}
